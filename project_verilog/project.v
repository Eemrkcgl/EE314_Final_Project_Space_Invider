
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module project(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire clk_2Hz;
wire [9:0] h_count, v_count;
wire [3:0] ss_angle_state;
wire [9:0] score;
wire fire; 
wire [1:0] fire_mode;
assign LEDR[0] = fire;
wire spawn;
wire [47:0] rand;
wire [3:0] enemy_count;
wire [3:0] as1, as2, as3, as4, as5, as6, as7, as8;
wire [3:0] h1, h2, h3, h4, h5, h6, h7, h8;
wire [9:0] s1, s2, s3, s4, s5, s6, s7, s8;
wire [9:0] x1, x2, x3, x4, x5, x6, x7, x8;	// x coordinate
wire [9:0] y1, y2, y3, y4, y5, y6, y7, y8;   // y coordinate
wire [1:0] t1, t2, t3, t4, t5, t6, t7, t8;   // type
wire a1, a2, a3, a4, a5, a6, a7, a8;			//alive
wire c1, c2, c3, c4, c5, c6, c7, c8;		// collision
wire end_game = c1 || c2 || c3 || c4 || c5 || c6 || c7 || c8;

assign LEDR[1] = end_game;

assign LEDR[2] = spawn;

assign enemy_count = a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8;

assign score = s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8;

seven_segment_display(enemy_count, HEX0);
seven_segment_display(h1, HEX1);
seven_segment_display(h2, HEX2);
seven_segment_display(h3, HEX3);
seven_segment_display(h4, HEX4);
//seven_segment_display(enemy_count, HEX5);

random_generator random(clk_2Hz, rand);

clock_divider (CLOCK_50, clk_2Hz);

input_controller(CLOCK_50, ~KEY[0], ~KEY[1], ~KEY[3], SW[1:0], ss_angle_state, fire, fire_mode);
vga_sync(CLOCK_50, VGA_CLK, VGA_HS, VGA_VS, VGA_BLANK_N, VGA_SYNC_N, h_count, v_count);

enemy_spawn es1(clk_2Hz, end_game, enemy_count, spawn);

wire [3:0] aua;
assign aua = rand[31:28];
 
enemy en1(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua,      rand[31:30]}, 1, h1, as1, t1, a1, x1, y1, c1, s1); //inputs
enemy en2(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 1,  rand[29:28]}, 1, h2, as2, t2, a2, x2, y2, c2, s2); //inputs
enemy en3(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 3,  rand[46:45]}, 1, h3, as3, t3, a3, x3, y3, c3, s3); //inputs
enemy en4(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 4,  rand[7:6]},   1, h4, as4, t4, a4, x4, y4, c4, s4); 
enemy en5(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 6,  rand[5:4]},   1, h5, as5, t5, a5, x5, y5, c5, s5); //inputs
enemy en6(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 8,  rand[1:0]},   1, h6, as6, t6, a6, x6, y6, c6, s6); //inputs
enemy en7(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 11, rand[33:32]}, 1, h7, as7, t7, a7, x7, y7, c7, s7); //inputs
enemy en8(CLOCK_50, spawn, fire_mode, fire, ss_angle_state, {aua + 14, rand[41:40]}, 1, h8, as8, t8, a8, x8, y8, c8, s8);



vga_driver(VGA_CLK, h_count, v_count, score, ss_angle_state, fire_mode, end_game, 

x1, y1,  a1, t1, h1, 
x2, y2,  a2, t2, h2,
x3, y3,  a3, t3, h3,
x4, y4,  a4, t4, h4,
x5, y5,  a5, t5, h5,
x6, y6,  a6, t6, h6,
x7, y7,  a7, t7, h7,
x8, y8,  a8, t8, h8,

VGA_R[7:0], VGA_G[7:0], VGA_B[7:0]);



//=======================================================
//  Structural coding
//=======================================================



endmodule
